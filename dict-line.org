# -*- coding: utf-8; -*-

* 提问 1: 模仿某个插件
帮我 模仿 这个 vscode 插件, 链接: https://github.com/program-in-chinese/vscode_english_chinese_dictionary
在 Emacs modeline 中显示, 提供选项 光标 空闲多长时间, 选择的 dict 目录

** 返回结果 1
这是一个在 Emacs 中实现类似 VSCode 插件功能的基本思路。首先，我们需要一个函数去读取词典文件并返回翻译。然后，我们需要一个 timer 来在光标空闲时运行这个函数。最后，我们将结果显示在 modeline 上。

下面是一个简单的实现：

#+begin_src emacs-lisp :tangle yes
(defvar idle-dict-timer nil
  "Timer that is set up when the last command finished.")

(defvar idle-dict-delay 1
  "The number of seconds of idle time to wait before showing translation.")

(defvar dict-directory "~/dict"
  "The directory of dictionary files.")

(defun idle-dict-cancel-timer ()
  "Cancel the current idle timer."
  (when idle-dict-timer
    (cancel-timer idle-dict-timer)
    (setq idle-dict-timer nil)))

(defun idle-dict-show-translation ()
  "Show translation in the modeline."
  (let* ((word (thing-at-point 'word))
         (translation (get-translation word)))
    (when translation
      (setq-default mode-line-format (list "%e" translation)))))

(defun get-translation (word)
  "Get translation of the WORD from dictionary files."
  (let* ((dict-files (directory-files dict-directory t "\\.txt$"))
         (translation nil))
    (while (and dict-files (not translation))
      (setq translation (search-dict (car dict-files) word))
      (setq dict-files (cdr dict-files)))
    translation))

(defun search-dict (dict-file word)
  "Search the WORD in the DICT-FILE and return its translation."
  (with-temp-buffer
    (insert-file-contents dict-file)
    (goto-char (point-min))
    (when (search-forward (concat word " ") nil t)
      (buffer-substring-no-properties (point) (line-end-position)))))

(defun idle-dict-set-timer ()
  "Set a timer to show translation when idle."
  (idle-dict-cancel-timer)
  (setq idle-dict-timer (run-with-idle-timer idle-dict-delay nil 'idle-dict-show-translation)))

(add-hook 'post-command-hook 'idle-dict-set-timer)
#+end_src

这个代码片段的工作原理是：每次命令完成后，它都会设置一个计时器。当 Emacs 空闲一段时间（由 `idle-dict-delay` 变量控制）后，它会运行 `idle-dict-show-translation` 函数。这个函数会获取光标下的单词，然后从词典文件中查找这个单词的翻译。如果找到翻译，它会将翻译显示在 modeline 上。

注意：这个实现非常基础且简单，它可能无法处理所有的边缘情况。例如，它假设词典文件是文本文件，每行包含一个单词和它的翻译，单词和翻译之间用空格分隔。如果你的词典文件的格式不同，你可能需要修改 `get-translation` 和 `search-dict` 函数。

* 提问 2: 添加 modeline 到最右边, 并保留原有 modeline 内容
继续优化它, 不要清除 Emacs 原有 modeline 内容, 你应该将它添加到 modeline 最右边
** 返回结果 2
我们可以在模式行的右侧添加一个自定义的段落，用于显示翻译。我们可以通过定义一个全局变量来存储翻译，并将这个变量添加到 `mode-line-format` 中。当我们获取到新的翻译时，我们只需要更新这个变量，模式行就会自动更新。

下面是如何做到这一点的代码：

#+begin_src emacs-lisp :tangle yes
(defvar idle-dict-timer nil
  "Timer that is set up when the last command finished.")

(defvar idle-dict-delay 1
  "The number of seconds of idle time to wait before showing translation.")

(defvar dict-directory "~/dict"
  "The directory of dictionary files.")

(defvar idle-dict-translation nil
  "The translation to be shown in the modeline.")

(defun idle-dict-cancel-timer ()
  "Cancel the current idle timer."
  (when idle-dict-timer
    (cancel-timer idle-dict-timer)
    (setq idle-dict-timer nil)))

(defun idle-dict-show-translation ()
  "Show translation in the modeline."
  (let* ((word (thing-at-point 'word))
         (translation (get-translation word)))
    (when translation
      (setq idle-dict-translation translation)
      (force-mode-line-update))))

(defun get-translation (word)
  "Get translation of the WORD from dictionary files."
  (let* ((dict-files (directory-files dict-directory t "\\.txt$"))
         (translation nil))
    (while (and dict-files (not translation))
      (setq translation (search-dict (car dict-files) word))
      (setq dict-files (cdr dict-files)))
    translation))

(defun search-dict (dict-file word)
  "Search the WORD in the DICT-FILE and return its translation."
  (with-temp-buffer
    (insert-file-contents dict-file)
    (goto-char (point-min))
    (when (search-forward (concat word " ") nil t)
      (buffer-substring-no-properties (point) (line-end-position)))))

(defun idle-dict-set-timer ()
  "Set a timer to show translation when idle."
  (idle-dict-cancel-timer)
  (setq idle-dict-timer (run-with-idle-timer idle-dict-delay nil 'idle-dict-show-translation)))

(add-hook 'post-command-hook 'idle-dict-set-timer)

(setq-default mode-line-format (list "%e" 'mode-line-front-space 'mode-line-mule-info 'mode-line-client 'mode-line-modified 'mode-line-remote 'mode-line-frame-identification 'mode-line-buffer-identification "   " 'mode-line-position '(vc-mode vc-mode) "  " 'mode-line-modes '(which-func-mode ("" which-func-format "--")) '(global-mode-string ("--" global-mode-string)) '(-3 . "%p") '("   " idle-dict-translation)))

#+end_src

在这个版本的代码中，我们定义了一个新的变量 `idle-dict-translation` 来存储翻译。我们在 `idle-dict-show-translation` 函数中更新这个变量，然后调用 `force-mode-line-update` 来强制更新模式行。我们还修改了 `mode-line-format`，在其末尾添加了 `idle-dict-translation`。这样，每次 `idle-dict-translation` 更新时，模式行就会自动显示新的翻译。

注意：这个实现仍然非常基础且简单，它可能无法处理所有的边缘情况。例如，它假设词典文件是文本文件，每行包含一个单词和它的翻译，单词和翻译之间用空格分隔。如果你的词典文件的格式不同，你可能需要修改 `get-translation` 和 `search-dict` 函数。

* 提问 3: 完整匹配
继续优化它, 文件内容一般如下:
    "asam": "n. (Asam)人名；(阿拉伯、土、德)阿萨姆",
    "Asama": "浅间山（日本本州中部的一座火山）",
    "asami": "n. (Asami)人名；(日)朝美(名)"

比如 Emacs 当前光标下的 word 为 asami , 你应该搜索 "asami" 而不是仅仅搜索 asami
如果搜索到了 "asami" , 那么 modeline 显示 n. (Asami)人名；(日)朝美(名)

** 返回结果 3
根据你提供的词典文件的格式，我们可以稍微修改一下 `search-dict` 函数，使其在单词前后添加双引号进行搜索。同时，我们也需要在找到匹配项后，从返回的字符串中删除单词本身和前后的双引号。

下面是修改后的代码：


#+begin_src emacs-lisp :tangle yes
(defvar idle-dict-timer nil
  "Timer that is set up when the last command finished.")

(defvar idle-dict-delay 1
  "The number of seconds of idle time to wait before showing translation.")

(defvar dict-directory "~/dict"
  "The directory of dictionary files.")

(defvar idle-dict-translation nil
  "The translation to be shown in the modeline.")

(defun idle-dict-cancel-timer ()
  "Cancel the current idle timer."
  (when idle-dict-timer
    (cancel-timer idle-dict-timer)
    (setq idle-dict-timer nil)))

(defun idle-dict-show-translation ()
  "Show translation in the modeline."
  (let* ((word (thing-at-point 'word))
         (translation (get-translation word)))
    (when translation
      (setq idle-dict-translation translation)
      (force-mode-line-update))))

(defun get-translation (word)
  "Get translation of the WORD from dictionary files."
  (let* ((dict-files (directory-files dict-directory t "\\.txt$"))
         (translation nil))
    (while (and dict-files (not translation))
      (setq translation (search-dict (car dict-files) word))
      (setq dict-files (cdr dict-files)))
    translation))

(defun search-dict (dict-file word)
  "Search the WORD in the DICT-FILE and return its translation."
  (with-temp-buffer
    (insert-file-contents dict-file)
    (goto-char (point-min))
    (when (search-forward (concat "\"" word "\"") nil t)
      (buffer-substring-no-properties (point) (line-end-position)))))

(defun idle-dict-set-timer ()
  "Set a timer to show translation when idle."
  (idle-dict-cancel-timer)
  (setq idle-dict-timer (run-with-idle-timer idle-dict-delay nil 'idle-dict-show-translation)))

(add-hook 'post-command-hook 'idle-dict-set-timer)

(setq-default mode-line-format (list "%e" 'mode-line-front-space 'mode-line-mule-info 'mode-line-client 'mode-line-modified 'mode-line-remote 'mode-line-frame-identification 'mode-line-buffer-identification "   " 'mode-line-position '(vc-mode vc-mode) "  " 'mode-line-modes '(which-func-mode ("" which-func-format "--")) '(global-mode-string ("--" global-mode-string)) '(-3 . "%p") '("   " idle-dict-translation)))

#+end_src

这个版本的代码应该能更准确地从你的词典文件中找到翻译。请注意，这个代码仍然假设词典文件中的每一行都包含一个单词和它的翻译，单词和翻译之间用空格分隔。如果你的词典文件的格式不同，你可能需要进一步修改 `get-translation` 和 `search-dict` 函数。

* 提问 4: 做成 global-mode
做的非常好, 现在把他做成 Emacs 包, 包名前缀为 dict-line
新增 global-mode 或 majo-mode 开启使用

** 返回结果 4, 完全可用
好的，我们可以将这个功能打包成一个 Emacs 包。下面是一个例子，包括了全局模式 `global-dict-line-mode` 和主模式 `dict-line-mode`。

#+begin_src emacs-lisp :tangle yes
(defgroup dict-line nil
  "Show word translation in mode line."
  :group 'convenience)

(defcustom dict-line-dict-directory "~/dict"
  "The directory of dictionary files."
  :type 'directory
  :group 'dict-line)

(defcustom dict-line-idle-delay 1
  "The number of seconds of idle time to wait before showing translation."
  :type 'number
  :group 'dict-line)

(defvar dict-line--timer nil
  "Timer that is set up when the last command finished.")

(defvar dict-line--translation nil
  "The translation to be shown in the modeline.")

(defun dict-line-cancel-timer ()
  "Cancel the current idle timer."
  (when dict-line--timer
    (cancel-timer dict-line--timer)
    (setq dict-line--timer nil)))

(defun dict-line-show-translation ()
  "Show translation in the modeline."
  (let* ((word (thing-at-point 'word t))
         (translation (when word (dict-line-get-translation word))))
    (when translation
      (setq dict-line--translation translation)
      (force-mode-line-update))))

(defun dict-line-get-translation (word)
  "Get translation of the WORD from dictionary files."
  (let* ((dict-files (directory-files dict-line-dict-directory t "\\.txt$"))
         (translation nil))
    (while (and dict-files (not translation))
      (setq translation (dict-line-search-dict (car dict-files) word))
      (setq dict-files (cdr dict-files)))
    translation))

(defun dict-line-search-dict (dict-file word)
  "Search the WORD in the DICT-FILE and return its translation."
  (with-temp-buffer
    (insert-file-contents dict-file)
    (goto-char (point-min))
    (when (search-forward (concat "\"" word "\":") nil t)
      (buffer-substring-no-properties (point) (line-end-position)))))

(defun dict-line-set-timer ()
  "Set a timer to show translation when idle."
  (dict-line-cancel-timer)
  (setq dict-line--timer (run-with-idle-timer dict-line-idle-delay nil 'dict-line-show-translation)))

(define-minor-mode dict-line-mode
  "Minor mode to show word translation in mode line."
  :lighter " DictLine"
  :global nil
  (if dict-line-mode
      (progn
        (add-hook 'post-command-hook 'dict-line-set-timer nil t)
        (unless (memq 'dict-line--translation global-mode-string)
          (setq global-mode-string (append global-mode-string '(dict-line--translation)))))
    (remove-hook 'post-command-hook 'dict-line-set-timer t)
    (setq global-mode-string (remq 'dict-line--translation global-mode-string))))

(define-globalized-minor-mode global-dict-line-mode
  dict-line-mode
  (lambda () (dict-line-mode 1)))

(provide 'dict-line)
#+end_src

这个包定义了两个模式：`dict-line-mode` 和 `global-dict-line-mode`。`dict-line-mode` 是一个主模式，只在当前缓冲区中启用。`global-dict-line-mode` 是一个全局模式，它在所有缓冲区中启用 `dict-line-mode`。

要使用这个包，你需要将这个代码保存为一个文件，比如 `dict-line.el`，然后在你的 Emacs 配置文件中添加以下代码：

#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "/path/to/dict-line.el")
(require 'dict-line)
(global-dict-line-mode 1)
#+end_src

请将 `"/path/to/dict-line.el"` 替换为 `dict-line.el` 文件的实际路径。这个代码将启用 `global-dict-line-mode`，这样你就可以在模式行中看到翻译了。

注意：这个实现仍然非常基础且简单，它可能无法处理所有的边缘情况。例如，它假设词典文件是文本文件，每行包含一个单词和它的翻译，单词和翻译之间用空格分隔。如果你的词典文件的格式不同，你可能需要修改 `dict-line-get-translation` 和 `dict-line-search-dict` 函数。

* 总结
已经待到可用状态了, 速度也快,剩下的是个人 优化
